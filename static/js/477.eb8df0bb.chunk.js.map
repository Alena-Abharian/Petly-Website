{"version":3,"file":"static/js/477.eb8df0bb.chunk.js","mappings":"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","sources":["components/HeroBg/HeroBg.jsx","page/homePage/Hero.jsx","../node_modules/typed.js/src/defaults.js","../node_modules/typed.js/src/initializer.js","../node_modules/typed.js/src/html-parser.js","../node_modules/typed.js/src/typed.js"],"sourcesContent":["import React from 'react';\nimport useMatchMedia from 'hooks/useMatchMedia';\nimport HeroWrap from './HeroWrap/HeroWrap';\n\nimport { ImgStyled } from './HeroBg.styled';\n\nimport mob_lady from '../../assets/hero/mob/mob_1x.webp';\nimport mob_lady2x from '../../assets/hero/mob/mob_2x.webp';\nimport tab_lady from '../../assets/hero/tab/tab_1x.webp';\nimport tab_lady2x from '../../assets/hero/tab/tab_2x.webp';\nimport desk_lady from '../../assets/hero/desk/desc_1x.webp';\nimport desk_lady2x from '../../assets/hero/desk/desc_2x.webp';\n// import layerFour from '../../assets/hero/desk/layer4.svg';\n\nfunction HeroBg() {\n  const { isDesktop, isTablet, isMobile } = useMatchMedia();\n\n  return (\n    <>\n      <HeroWrap />\n\n      {isMobile && (\n        <ImgStyled\n          src={mob_lady}\n          srcSet={`${mob_lady2x} 2x`}\n          alt=\"lady with a dog\"\n        />\n      )}\n      {isTablet && (\n        <ImgStyled\n          src={tab_lady}\n          srcSet={`${tab_lady2x} 2x`}\n          alt=\"lady with a dog\"\n        />\n      )}\n      {isDesktop && (\n        <ImgStyled\n          src={desk_lady}\n          srcSet={`${desk_lady2x} 2x`}\n          alt=\"lady with a dog\"\n        />\n      )}\n    </>\n  );\n}\nexport default HeroBg;\n","import React from 'react';\nimport HeroBg from 'components/HeroBg';\nimport { HeroTitle } from './Hero.styled';\nimport { useEffect, useRef } from 'react';\nimport Typed from 'typed.js';\n\nfunction Hero() {\n  const el = useRef(null);\n\n  useEffect(() => {\n    const typed = new Typed(el.current, {\n      strings: ['Take good care of your small pets'],\n      typeSpeed: 100,\n      showCursor: false,\n    });\n\n    return () => {\n      typed.destroy();\n    };\n  }, []);\n\n  return (\n    <>\n      <HeroTitle ref={el}></HeroTitle>\n      <HeroBg />\n    </>\n  );\n}\n\nexport default Hero;\n","/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    if (self.currentElContent && self.currentElContent.length > 0) {\n      self.strPos = self.currentElContent.length - 1;\n      self.strings.unshift(self.currentElContent);\n    }\n\n    // the order of strings\n    self.sequence = [];\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    if (self.autoInsertCss) {\n      this.appendCursorAnimationCss(self);\n      this.appendFadeOutAnimationCss(self);\n    }\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendCursorAnimationCss(self) {\n    const cssDataName = 'data-typed-js-cursor-css';\n\n    if (!self.showCursor || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n\n  appendFadeOutAnimationCss(self) {\n    const cssDataName = 'data-typed-fadeout-js-css';\n\n    if (!self.fadeOut || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substring(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substring(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // If the strPos is 0, we're starting from the beginning of a string\n      // else, we're starting with a previous string that needs to be backspaced first\n      if (this.strPos === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        this.backspace(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substring(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substring(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substring(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substring(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substring(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n"],"names":["_useMatchMedia","useMatchMedia","isDesktop","isTablet","isMobile","_jsxs","_Fragment","children","_jsx","HeroWrap","ImgStyled","src","mob_lady","srcSet","concat","mob_lady2x","alt","tab_lady","tab_lady2x","desk_lady","desk_lady2x","el","useRef","useEffect","typed","Typed","current","strings","typeSpeed","showCursor","destroy","HeroTitle","ref","HeroBg","s","stringsElement","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","t","onComplete","preStringTyped","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","e","n","prototype","load","i","document","querySelector","options","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","trim","style","cssText","r","Array","slice","apply","o","length","a","push","innerHTML","u","strPos","currentElContent","this","getCurrentElContent","unshift","sequence","arrayPos","stopNum","curLoop","pause","status","typewrite","curString","curStrPos","typingComplete","appendCursorAnimationCss","appendFadeOutAnimationCss","value","createElement","setAttribute","body","appendChild","typeHtmlChars","substring","charAt","backSpaceHtmlChars","begin","toggle","start","stop","toggleBlinking","backspace","reset","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","classList","contains","remove","humanizer","test","exec","parseInt","temporaryPause","p","c","doneTyping","keepTyping","setPauseStatus","complete","initFadeOut","add","Math","round","random","sort","className","addEventListener","insertBefore","nextSibling"],"sourceRoot":""}